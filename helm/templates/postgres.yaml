{{- if .Values.db.postgres.enable }}
kind: StatefulSet
apiVersion: apps/v1beta2
metadata:
  name: '{{ template "postgres.fullname" .  }}'
  labels:
    module: {{ template "airflow.name" . }}
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app: postgres
spec:
  serviceName: {{ template "postgres.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      module: {{ template "airflow.name" . }}
      release: {{ .Release.Name }}
      app: postgres
  template:
    metadata:
      labels:
        module: {{ template "airflow.name" . }}
        release: {{ .Release.Name }}
        app: postgres
    spec:
      containers:
      - name: postgres
        image: '{{ .Values.db.postgres.image.repository }}:{{ .Values.db.postgres.image.tag }}'
        imagePullPolicy: {{ .Values.db.postgres.image.pullPolicy }}
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        env:
        - name: POSTGRES_USER
          value: root
        - name: POSTGRES_PASSWORD
          value: root
        - name: POSTGRES_DB
          value: airflow
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        livenessProbe:
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 5
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready --host $POD_IP ||  if [[ $(psql -qtAc --host $POD_IP 'SELECT pg_is_in_recovery') != "f" ]]; then  exit 0 else; exit 1; fi
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready --host $POD_IP
        resources:
{{ toYaml .Values.db.postgres.resources | indent 10 }}
  {{- if not .Values.db.postgres.persistence.data.enable }}
      volumes:
      - name: data
        emptyDir: {}
  {{ end }}
  {{- if .Values.db.postgres.persistence.data.enable }}
  {{- with .Values.db.postgres.persistence.data }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - {{ .accessMode | quote }}
    {{- if .storageClass }}
    {{- if (eq "-" .storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .storageClass }}"
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .size }}"
  {{ end }}
  {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "postgres.fullname" . }}
spec:
  clusterIP: None
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    module: {{ template "airflow.name" . }}
    release: {{ .Release.Name }}
    app: postgres
{{ end }}
